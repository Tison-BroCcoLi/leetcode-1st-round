// #122 Best Time to Buy and Sell Stock II
// complicated solution...

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.size() <= 1) return 0;
        
        int len = prices.size();
        
        int buyTime1 = 0;
        while(buyTime1 < len - 1){
            if(prices[buyTime1] >= prices[buyTime1+1]) buyTime1++;
            else break;
        }
        if(buyTime1 == len - 1) return 0;
        int sellTime1 = buyTime1 + 1;
        
        int res = 0;
        int buyTime2 = 0;
        
        for(int i = sellTime1 + 1; i < len; i++){
            if(prices[i] > prices[sellTime1]){
                if(buyTime2){
                    res += prices[sellTime1] - prices[buyTime1];
                    buyTime1 = buyTime2;
                    sellTime1 = i;
                    buyTime2 = 0;
                }
                else{
                    sellTime1 = i;
                }
            }
            else if(prices[i] < prices[buyTime1]){
                res += prices[sellTime1] - prices[buyTime1];
                while(i < len - 1){
                    if(prices[i] >= prices[i+1]) i++;
                    else break;
                }
                if(i == len - 1) return res;
                buyTime1 = i;
                sellTime1 = i+1;
                buyTime2 = 0;
            }
            else{
                if(buyTime2){
                    if(prices[i] <= prices[buyTime2]) buyTime2 = i;
                    else{
                        res += prices[sellTime1] - prices[buyTime1];
                        buyTime1 = buyTime2;
                        sellTime1 = i;
                        buyTime2 = 0;
                    }
                }
                else{
                    buyTime2 = i;
                }
            }
        }
        res += prices[sellTime1] - prices[buyTime1];
        
        return res;
    }
};

// more simple and precise one. just add every diff, that means I gain whenever the stock increase
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int res = 0;
        
        for(int i = 1; i < prices.size(); i++){
            res += max(prices[i] - prices[i-1], 0);
        }
        
        return res;
    }
};
