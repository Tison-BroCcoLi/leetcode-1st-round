// #113 Path Sum II
// backtrack solution

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        vector<vector<int>> res;
        
        if(root == NULL) return res;
        
        stack<TreeNode*> nodePath;
        stack<TreeNode*> stk;
        vector<int> path;
        int tempsum = 0;
        
        TreeNode* scan = root;
        stk.push(root);
        
        while(!isLeaf(scan) || !stk.empty()){
            if(!isLeaf(scan)){
                nodePath.push(scan);
                path.push_back(scan->val);
                tempsum += scan->val;
                
                if(scan->right != NULL) stk.push(scan->right);
                
                scan = scan -> left;
            }
            else{
                if(scan != NULL && tempsum + scan->val == sum){
                    path.push_back(scan->val);
                    res.push_back(path);
                    path.pop_back();
                }
                
                //if(!stk.empty()){
                    while(!nodePath.empty() && nodePath.top()->right != stk.top()){
                        tempsum -= nodePath.top()->val;
                        path.pop_back();
                        nodePath.pop();
                    }
                //}
                
                if(nodePath.empty()) break;
                scan = stk.top();
                stk.pop();
            }
        }
        
        return res;
    }
    
    bool isLeaf(TreeNode* root){
        if(root == NULL) return true;
        return root->left == NULL && root->right ==NULL;
    }
};

// more precise edition
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        vector<vector<int> > paths;
        vector<int> path;
        findPaths(root, sum, path, paths);
        return paths;  
    }
private:
    void findPaths(TreeNode* node, int sum, vector<int>& path, vector<vector<int> >& paths) {
        if (!node) return;
        path.push_back(node -> val);
        if (!(node -> left) && !(node -> right) && sum == node -> val)
            paths.push_back(path);
        findPaths(node -> left, sum - node -> val, path, paths);
        findPaths(node -> right, sum - node -> val, path, paths);
        path.pop_back();
    }
};
