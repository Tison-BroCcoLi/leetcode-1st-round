//#10 Regular Expression Matching 

//这道题审题花了不少时间，'.'与任意字符匹配，'*'表示前一个字符重复任意次
//例子中有一个'ab'和'.*'匹配，理解为'.*'可以解释为重复'.'任意次，所以'.*' -> '..' -> 'ab'，返回true

//Note:
//1.从检验结果看，官方程序把s作为普通字符串，把p作为简写字符串
//2.从检验结果看，官方程序不对p作合法性检查，即如果输入的p以'*'开头，或者字符串中连续出现'*',则无法输出结果
//3.从检验结果看，官方程序默认s不包含'.'和'*'这两个功能字符，且不会对此作检查

//思路：
//1.如果s是空字符串，则p必须是空字符串或者任意字符后跟一个'*'的结构（可以重复多次，也即必须偶数个字符）
//2.对于s中的任意一个单个字符，p中与其匹配的内容必须为一个字符本身（可带'*'）,'.'(可带'*')，加上若干任意字符配'*'的结构
//3.对于s中的叠字字符，p中与其匹配的内容必须为相同个数或更少个数的相同字符或'.',配上任意'c*'组合
//4.对于s中字符的每一次比较，都记录其可能结束位置的极小值和极大值，下一个s中字符的比较从上一个字符比较结束位置
//  的极小值的后一个字符（若为'.*'则从极小值本身开始）开始比较，寻找可能的结束位置，若在上一个字符可能结束位置
//  之前出错，则错误可忽略，若在可能结束位置之后无法匹配，则返回错误，同样记录其可能结束位置的极小值和极大值
//5.依次比较直到s字符串结束
 
 //Code too long!! =-=!
 
 //参考了网上的答案，采用递归的思路
 //1.当s结束时，p也需要结束，或者当p未结束时，p只能是间隔'*'的形式
 //2.当s未结束而p结束时，无法匹配
 //3.s和p均为结束，如果p的下一位不为'*'，则比较当前位，不同则不匹配，相同则都递归到下一位的比较
 //                如果p的下一位为'*'，则p及其后面的'*'可以匹配s中从0开始任意多（记为i）等于p的字符，递归到s+i和p+2的比较
 
 class Solution {
public:
    bool isMatch(string s, string p) {
        int slen=s.size();
        int plen=p.size();
        
        if(slen==0){
            if(plen==0) return true;
            else{
                if(plen%2==1) return false;
                else{
                    int i=1;
                    while(i<plen){
                        char c=p[i];
                        if(p[i]!='*') return false;
                        i+=2;
                    }
                    return true; 
                }
            }
        }
        
        else if(slen!=0 && plen==0) return false;
        
        else{
            if(plen<1 || p[1]!='*'){
                if(p[0]!=s[0] && p[0]!='.') return false;
                else return isMatch(s.substr(1,slen-1),p.substr(1,plen-1));
            }
            else{
                int i=0;
                if(s[i]!=p[0] && p[0]!='.') return isMatch(s,p.substr(2,plen-2));
                if(isMatch(s,p.substr(2,plen-2))) return true;
                while(s[i]==p[0] || p[0]=='.'){
                    if(isMatch(s.substr(i+1,slen-i-1),p.substr(2,plen-2))) return true;
                    if(i==slen-1) break;
                    i++;
                }
                return false;
            }
        }
    }
};
