// #126 Word Ladder II
// 2-end BFS
// tip: STL unordered_set

class Solution {
public:
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        vector<vector<string>> ladders;
        vector<string> ladder;
        ladder.push_back(beginWord);
        
        if(find(wordList.begin(), wordList.end(), endWord) == wordList.end()) return ladders;
        
        unordered_set<string> dict;
        for(string word : wordList) dict.insert(word);
        
        unordered_set<string> startWords;
        startWords.insert(beginWord);
        dict.erase(beginWord);
        
        unordered_set<string> endWords;
        endWords.insert(endWord);
        dict.erase(endWord);
        
        map<string, vector<string>> children;
        
        bool flip = true;
        if(searchLadders(startWords, endWords, dict, children, flip)){
            genLadders(beginWord, endWord, children, ladder, ladders);
        }
        
        return ladders;
    }
    
private:
    bool searchLadders(unordered_set<string>& startWords, unordered_set<string>& endWords, unordered_set<string>& dict, 
                       map<string, vector<string>>& children, bool flip){
        flip = !flip;
        
        if(startWords.empty()) return false;
        if(startWords.size() > endWords.size()) return searchLadders(endWords, startWords, dict, children, flip);
        
        unordered_set<string> intermediate;
        bool done = false;
        
        for(string word : startWords){
            string temp = word;
            int n = word.size();
            
            for(int p = 0; p < n; p++){
                char letter = word[p];
                for(int i = 0; i < 26; i++){
                    word[p] = 'a' + i;
                    if(endWords.find(word) != endWords.end()){
                        done = true;
                        flip? children[word].push_back(temp) : children[temp].push_back(word);
                    }
                    else if(!done && dict.find(word) != dict.end()){
                        intermediate.insert(word);
                        flip? children[word].push_back(temp) : children[temp].push_back(word);
                    }
                }
                word[p] = letter;
            }
        }
        
        for(string word : intermediate){
            dict.erase(word);
        }
        
        return done || searchLadders(endWords, intermediate, dict, children, flip);
    }
    
    void genLadders(string& beginWord, string& endWord, map<string, vector<string>>& children, 
                    vector<string>& ladder, vector<vector<string>>& ladders){
        if(beginWord == endWord){
            ladders.push_back(ladder);
            return;
        }
        
        for(string child : children[beginWord]){
            ladder.push_back(child);
            genLadders(child, endWord, children, ladder, ladders);
            ladder.pop_back();
        }
    }
};
