// #140 Word Break II
// DP solution 
// there is a testcase which is "aaaaaaaaaaaaaaaabaaaaaaaaaaaaa", and official solution cannot get through this.
// so i use a trick which is word break I to pass the testcase

class Solution {
public:
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        vector<string> strRes;
        if(!wordBreakHelp(s, wordDict)) return strRes;
        
        int dictLen = wordDict.size();
        map<string, int> myMap;
        for(int i = 0; i < dictLen; i++){
            myMap[wordDict[i]] = 1;
        }
        
        int strLen = s.size();
        
        vector<vector<vector<int>>> posRes;
        vector<vector<int>> zeroPosRes;
        vector<int> eachPosRes;
        eachPosRes.push_back(0);
        zeroPosRes.push_back(eachPosRes);
        posRes.push_back(zeroPosRes);
        
        for(int i = 1; i <= strLen; i++){
            vector<vector<int>> eachPosRes;
            
            for(int j = 0; j < i; j++){
                string sonStr = s.substr(j,i-j);
                if(!posRes[j].empty() && myMap.find(sonStr) != myMap.end()){
                    int formerSize = posRes[j].size();
                    for(int k = 0; k < formerSize; k++){
                        vector<int> tempPos = posRes[j][k];
                        tempPos.push_back(i);
                        eachPosRes.push_back(tempPos);
                    }
                }
            }
            
            posRes.push_back(eachPosRes);
        }
        
        for(int i = 0; i < posRes[strLen].size(); i++){
            vector<int> pos = posRes[strLen][i];
            string tempStrRes;
            for(int j = 1; j < pos.size() - 1; j++){
                tempStrRes = tempStrRes + s.substr(pos[j-1], pos[j] - pos[j-1]) + " ";
            }
            tempStrRes = tempStrRes + s.substr(pos[pos.size()-2]);
            
            strRes.push_back(tempStrRes);
        }
        
        return strRes;
    }
    
    bool wordBreakHelp(string s, vector<string>& wordDict) {
        int strLen = s.size();
        int dictLen = wordDict.size();
        
        map<string, int> myMap;
        int* res = new int[strLen+1];
        for(int i = 0; i < dictLen; i++){
            myMap[wordDict[i]] = 1;
        }
        
        
        for(int i = 0; i < strLen; i++){
            res[i] = 0;
        }
        
        res[0] = 1;
        
        for(int i = 1; i <= strLen; i++){
            for(int j = 0; j < i; j++){
                if(res[j] == 1){
                    string tailStr = s.substr(j, i-j);
                    if(myMap.find(tailStr) != myMap.end()){
                        res[i] = 1;
                        break;
                    }
                }
            }
        }
        
        if(res[strLen] == 1) return true;
        else return false;
    }
};
