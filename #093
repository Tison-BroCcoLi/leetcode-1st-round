// #093 Restore IP Adresses
// similar as backtrack: take 1~3 digits as first element, judge the rest
// tip: a legal element should between 0~255 and cannot start with 0 if it is non-zero

class Solution {
public:
    vector<string> restoreIpAddresses(string s) {
        vector<string> res;
        
        int len = s.size();
        if(len < 4 || len > 12) return res;
        
        for(int dot1 = 1; dot1 <= 3; dot1++){
            if(len - dot1 < 3 || len - dot1 > 9) continue;
            
            string ip1 = s.substr(0,dot1);
            if(atoi(ip1.c_str()) > 255) continue;
            if(ip1[0] == '0' && dot1 > 1) continue;
            
            //res.push_back(ip1);
            
            for(int dot2 = 1; dot2 <= 3; dot2++){
                if(len - dot1 - dot2 < 2 || len - dot1 - dot2 > 6) continue;
                
                string ip2 = s.substr(dot1, dot2);
                if(atoi(ip2.c_str()) > 255) continue;
                if(ip2[0] == '0' && dot2 > 1) continue;
                
                //res.push_back(ip2);
                
                for(int dot3 = 1; dot3 <= 3; dot3++){
                    if(len - dot1 - dot2 - dot3 < 1 || len - dot1 - dot2 - dot3 > 3) continue;
                    
                    string ip3 = s.substr(dot1+dot2, dot3);
                    string ip4 = s.substr(dot1+dot2+dot3, len-dot1-dot2-dot3);
                    if(atoi(ip3.c_str()) > 255) continue;
                    if(ip3[0] == '0' && dot3 > 1) continue;
                    if(atoi(ip4.c_str()) > 255) continue;
                    if(ip4[0] == '0' && len - dot1 - dot2 - dot3 > 1) continue;
                    
                    string instance =ip1 + "." + ip2 + "." + ip3 + "." + ip4;
                    res.push_back(instance);
                }
            }
        }
        
        return res;
        
    }
};
