// #109 Covert Sorted List to Binary Search Tree
// tranfer sorted list to sorted array first, then just like #108

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedListToBST(ListNode* head) {
        vector<int> nums;
        ListNode* scan = head;
        int len = 0;
        while(scan != NULL){
            nums.push_back(scan->val);
            scan = scan->next;
            len++;
        }
        
        return buildTree(nums, 0, len-1);
    }
    
    TreeNode* buildTree(vector<int>& nums, int start, int end){
        if(end < start) return NULL;
        
        int mid = (start + end + 1) / 2;
        TreeNode* root = new TreeNode(nums[mid]);
        root->left = buildTree(nums, start, mid-1);
        root->right = buildTree(nums, mid+1, end);
        
        return root;
    }
};
