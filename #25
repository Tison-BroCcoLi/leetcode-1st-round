//25. Reverse Nodes in k-Group

//容易想到使用一个大小为k栈来存储节点，当栈存满时，开始弹出
//注意新列表开头的处理
//注意最后不满k个结点的处理，我是通过记录一个新k子列的头指针，如果这个子列结点数小于k，则将这个头指针接在当前列表指针的后面

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head==NULL) return head;
        if(k<=1) return head;
        
        stack<ListNode*> mystack;
        int index=0;
        ListNode* oldtemp=head;
        ListNode* temphead=head;
        ListNode* newhead=NULL;
        ListNode* newtemp=newhead;
        while(oldtemp!=NULL){
            mystack.push(oldtemp);
            oldtemp=oldtemp->next;
            index++;
            
            if(index==k){
                if(newhead==NULL){
                    newhead=mystack.top();
                    mystack.pop();
                    newtemp=newhead;
                    for(int i=1;i<k;i++){
                        newtemp->next=mystack.top();
                        newtemp=mystack.top();
                        mystack.pop();
                    }
                }
                else{
                    for(int i=0;i<k;i++){
                        newtemp->next=mystack.top();
                        newtemp=mystack.top();
                        mystack.pop();
                    }
                }
                index=0;
                temphead=oldtemp;
            }
        }
        
        if(mystack.empty()){
            newtemp->next=NULL;
            return newhead;
        }
        else{
            if(newhead==NULL){
                newhead=temphead;
            }
            else newtemp->next=temphead;;
            return newhead;
        }
    }
};
