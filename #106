// #106 Construct Binary Tree from Inorder and Postorder Traversal
// same as #105: build right subtree first

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(inorder.empty()) return NULL;
        
        int ipos = postorder.size() - 1;
        int iin = inorder.size() - 1;
        
        TreeNode* root = new TreeNode(postorder[ipos--]);
        stack<TreeNode*> myStack;
        myStack.push(root);
        
        while(true){
            while(myStack.top()->val != inorder[iin]){
                TreeNode* newnode = new TreeNode(postorder[ipos--]);
                myStack.top()->right = newnode;
                myStack.push(newnode);
            }
            
            TreeNode* node;
            while(!myStack.empty() && myStack.top()->val == inorder[iin]){
                node = myStack.top();
                myStack.pop();
                iin--;
            }
            
            if(ipos == -1) break;
            TreeNode* newnode = new TreeNode(postorder[ipos--]);
            node->left = newnode;
            myStack.push(newnode);
        }
        
        return root;
    }
};
