// #105 Construct Binary Tree
// Recursive one : 43ms
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(preorder.size() != inorder.size() || preorder.size() == 0) return NULL;
        
        return buildSubTree(preorder, inorder, 0, preorder.size(), 0);
    }
    
    TreeNode* buildSubTree(vector<int>& preorder, vector<int> inorder, int preBegin, int preLen, int inBegin){
        if(preLen == 0) return NULL;
        
        TreeNode* root = new TreeNode(preorder[preBegin]);
        
        vector<int>::iterator it = find(inorder.begin()+inBegin, inorder.begin()+inBegin+preLen, preorder[preBegin]);
        
        int index = it - inorder.begin() - inBegin;
        
        root->left = buildSubTree(preorder, inorder, preBegin+1, index, inBegin);
        root->right = buildSubTree(preorder, inorder, preBegin+index+1, preLen-index-1, inBegin+index+1);
        
        return root;
    }
};

// iterative one: 9ms
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(preorder.empty()) return NULL;
        int ppre = 0, pin = 0;
        TreeNode* root = new TreeNode(preorder[ppre++]);
        stack<TreeNode*> stk;
        stk.push(root);
        while(true) {
            while(stk.top()->val != inorder[pin]) {
                TreeNode* newnode = new TreeNode(preorder[ppre++]);
                stk.top()->left = newnode;
                stk.push(newnode);
            }
            TreeNode* node;
            while(!stk.empty() && stk.top()->val == inorder[pin]) {
                node = stk.top();
                stk.pop();
                pin++;
            }
            if(ppre == preorder.size()) break;
            TreeNode* newnode = new TreeNode(preorder[ppre++]);
            node->right = newnode;
            stk.push(newnode);
        }
        return root;
    }
};
