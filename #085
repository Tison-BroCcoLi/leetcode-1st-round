// #085 Maximal Rectangle
// DP Algorithm: S = (right - left) * height: while left and right can be determined by the current row
//                                            height can be determined by the previous row

class Solution {
public:
    int maximalRectangle(vector<vector<char>>& matrix) {
        if(matrix.empty()) return 0;
        
        int m = matrix.size();
        int n = matrix[0].size();
        
        if(n == 0) return 0;
        
        /*vector<int> l(n,0);
        vector<int> r(n,n);
        vector<int> h(n,0);*/
        int* l = new int[n];
        int* r = new int[n];
        int* h = new int[n];
        for(int i = 0;  i < n; i++){
            l[i] = h[i] = 0;
            r[i] = n;
        }
        
        int res = 0;
        
        for(int i = 0; i < m; i++){
            int curl = 0;
            int curr = n;
            
            for(int j = n-1; j >= 0; j--){
                if(matrix[i][j] == '1'){
                    r[j] = min(r[j], curr);
                }
                else{
                    r[j] = n;
                    curr = j;
                }
            }
            
            for(int j = 0; j < n; j++){
                if(matrix[i][j] == '1'){
                    h[j]++;
                    l[j] = max(l[j], curl);
                }
                
                else{
                    h[j] = 0;
                    l[j] = 0;
                    curl = j+1;
                }
                
                res = max(res, (r[j] - l[j])*h[j]);
            }
        }
        
        return res;
    }
};
