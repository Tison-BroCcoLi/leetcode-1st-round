// #081 Search in Rotated Sorted Array II
// same as I, if target is not in the sorted half, it definitely in the other half.
// just one exception: 
// when the head, the middle and the tail are same, we cannot tell which half is sorted.
// In this case, we simply move the head one step forward.

class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int l = 0;
        int r = nums.size()-1;
        
        while(l <= r){
            int m = (l+r)/2;
            
            if(nums[m] == target) return true;
            
            if(nums[l] < nums[m]){
                if(target < nums[m] && target >= nums[l]){
                    r = m - 1;
                }
                else{
                    l = m + 1;
                }
            }
            
            else if(nums[l] == nums[m]){
                if(nums[m] != nums[r]){
                    l = m + 1;
                }
                else{
                    l++;
                }
            }
            
            else{
                if(target > nums[m] && target <= nums[r]){
                    l = m + 1;
                }
                else{
                    r = m - 1;
                }
            }
        }
        
        return false;
    }
};
