// #130 Surrounded Regions
// BFS. check boundry 'O' and all their neighbour 'O's, mark it as '1'. then turn remaining 'O' to 'X' and '1' to 'O' 
// note: using DFS would probably cause stack overflow issue, because the depth could be too deep

class Solution {
public:
    void solve(vector<vector<char>>& board) {
        int rows = board.size();
        if(rows <= 2) return;
        
        int cols = board[0].size();
        if(cols <= 2) return;
        
        for(int i = 0; i < rows; i++){
            if(board[i][0] == 'O'){
                check(board, i, 0, rows, cols);
            }
            
            if(board[i][cols-1] == 'O'){
                check(board, i, cols-1, rows, cols);
            }
        }
        
        for(int i = 1; i < cols-1; i++){
            if(board[0][i] == 'O'){
                check(board, 0, i, rows, cols);
            }
            
            if(board[rows-1][i] == 'O'){
                check(board, rows-1, i, rows, cols);
            }
        }
        
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                if(board[i][j] == 'O'){
                    board[i][j] = 'X';
                }
                else if(board[i][j] == '1'){
                    board[i][j] = 'O';
                }
            }
        }
    }
    
private:
    void check(vector<vector<char>>& board, int i, int j, int rows, int cols){
        if(board[i][j] == 'O'){
            board[i][j] = '1';
            
            queue<pair<int, int>> myQue;
            myQue.push(make_pair(i,j));
            
            while(!myQue.empty()){
                pair<int, int> scan = myQue.front();
                myQue.pop();
                
                int sr = scan.first;
                int sc = scan.second;
                
                pair<int, int> adjs[4] = {{sr-1, sc}, {sr+1, sc}, {sr, sc-1}, {sr, sc+1}};
                
                for(int k = 0; k < 4; k++){
                    int r = adjs[k].first;
                    int c = adjs[k].second;
                    if((r >= 0) && (r < rows) && (c >= 0) && (c < cols) && (board[r][c] == 'O')){
                        myQue.push(make_pair(r,c));
                        board[r][c] = '1';
                    }
                }
            }
        }
    }
};
