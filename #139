// #139 Word Break
// DP solution, O(n^3)

class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        int strLen = s.size();
        int dictLen = wordDict.size();
        
        map<string, int> myMap;
        int* res = new int[strLen+1];
        for(int i = 0; i < dictLen; i++){
            myMap[wordDict[i]] = 1;
        }
        
        
        for(int i = 0; i < strLen; i++){
            res[i] = 0;
        }
        
        res[0] = 1;
        
        for(int i = 1; i <= strLen; i++){
            for(int j = 0; j < i; j++){
                if(res[j] == 1){
                    string tailStr = s.substr(j, i-j);
                    if(myMap.find(tailStr) != myMap.end()) res[i] = 1;
                }
            }
        }
        
        if(res[strLen] == 1) return true;
        else return false;
    }
};
