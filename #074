// #074 Search a 2D Matrix
// binary search, first by rows, then by cols

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int rows = matrix.size();
        int cols = matrix[0].size();
        
        int up = 0;
        int down = rows - 1;
        
        if(matrix[0][0] > target || matrix[down][cols - 1] < target) return false;
        if(matrix[0][0] == target) return true;
        
        if(matrix[down][0] == target) return true;
        else if(matrix[down][0] < target) up = down;
        else{
            while(up + 1 < down){
                int mid = (up + down) / 2;
                
                if(matrix[mid][0] == target) return true;
                else if(matrix[mid][0] < target) up = mid;
                else down = mid;
            }
        }
        
        int left = 0;
        int right = cols - 1;
        
        if(matrix[up][right] == target) return true;
        
        while(left + 1 < right){
            int middle = (left + right) / 2;
            
            if(matrix[up][middle] == target) return true;
            else if(matrix[up][middle] < target) left = middle;
            else right = middle;
        }
        
        return false;
    }
};
