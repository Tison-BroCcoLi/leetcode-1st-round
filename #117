// #117 Populating Next Right Pointers in Each Node II
// deal with it line by line

/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
public:
    void connect(TreeLinkNode *root) {
        if(root == NULL) return;
        
        TreeLinkNode* nextHead = NULL;
        TreeLinkNode* head = root;
        
        if(root->left || root->right){
            if(root->left) nextHead = root->left;
            else nextHead = root->right;
        }
        
        while(nextHead){
            TreeLinkNode* scanup = head;
            TreeLinkNode* scannext = nextHead;
            
            while(scanup){
                if(scanup->left){
                    if(scanup->left != scannext){
                        scannext->next = scanup->left;
                        scannext = scannext->next;
                    }
                }
                    
                if(scanup->right){
                    if(scanup->right != scannext){
                        scannext->next = scanup->right;
                        scannext = scannext->next;
                    }
                }
                
                scanup = scanup->next;
            }
            
            scannext = nextHead;
            nextHead = NULL;
            while(scannext){
                if(scannext->left || scannext->right){
                    head = scannext;
                    
                    if(scannext->left){
                        nextHead = scannext->left;
                    }
                    else{
                        nextHead = scannext->right;
                    }
                    
                    break;
                }
                
                scannext = scannext->next;
            }
        }
    }
};
