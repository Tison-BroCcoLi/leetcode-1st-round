#5 Longest Palindromic Substring

//找到最长的回文子字符串（仅有一个）
//回文子字符串或者是偶数个字符，或者是奇数个字符，因此寻找字符串中的“AA”或“ABA”形式的子字符串，向两边延伸判断其回文性
//用一个全局int变量记录最长的字符数

class Solution {
public:
    string longestPalindrome(string s) {
        int length=s.size();
        if(length==0 || length==1) return s;
        
        int i=FindAA(s,0);
        int maxlength=1;
        string res;
        int pos=0;
        
        //findAA
        while(i<length && i!=-1){
            int tlength=GetAALength(s,i);
            if(tlength>maxlength){
                maxlength=tlength;
                pos=i-(maxlength-2)/2;
            }
            i=FindAA(s,i+1);
        }
        
        i=FindABA(s,0);
        while(i<length && i!=-1){
            int tlength=GetABALength(s,i);
            if(tlength>maxlength){
                maxlength=tlength;
                pos=i-(maxlength-3)/2;
            }
            i=FindABA(s,i+1);
        }
        
        res=res.insert(0,s,pos,maxlength);
        return res;
    }
    
private:
    int FindAA(string s,int n){
        int length=s.size();
        if(n==length-1) return -1;
        int i=n;
        while(i<length-1){
            char c1=s[i];
            char c2=s[i+1];
            if(c1==c2) return i;
            i++;
        }
        if(i==length-1) return -1;
    }
    
    int FindABA(string s,int n){
        int length=s.size();
        if(n==length-1 || n==length-2) return -1;
        int i=n;
        while(i<length-2){
            char c1=s[i];
            char c2=s[i+2];
            if(c1==c2) return i;
            i++;
        }
        if(i==length-2) return -1;
    }
    
    int GetAALength(string s, int n){
        int length=s.size();
        int res=2;
        int i=n-1;
        int j=n+2;
        while(i>=0 && j<length){
            char c1=s[i];
            char c2=s[j];
            if(c1==c2) res+=2;
            else break;
            i--;
            j++;
        }
        return res;
    }
    
    int GetABALength(string s, int n){
        int length=s.size();
        int res=3;
        int i=n-1;
        int j=n+3;
        while(i>=0 && j<length){
            char c1=s[i];
            char c2=s[j];
            if(c1==c2) res+=2;
            else break;
            i--;
            j++;
        }
        return res;
    }
};
